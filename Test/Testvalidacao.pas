unit Testvalidacao;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, validacao;

type
  // Test methods for class TQualTriangulo

  TestTQualTriangulo = class(TTestCase)
  strict private
    FQualTriangulo: TQualTriangulo;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestValidaTrianguloEscaleno;
    procedure TestValidaTrianguloIsosceles;
    procedure TestValidaTrianguloEquilatero;
    procedure TrianguloValido;
  end;

implementation

procedure TestTQualTriangulo.SetUp;
begin
  FQualTriangulo := TQualTriangulo.Create;
end;

procedure TestTQualTriangulo.TearDown;
begin
  FQualTriangulo.Free;
  FQualTriangulo := nil;
end;

procedure TestTQualTriangulo.TestValidaTrianguloEscaleno;
var
  ReturnValue: string;
  LadoC: Integer;
  LadoB: Integer;
  ladoA: Integer;
begin
  //Testes       //passa   //passa   //passa  //passa  //passa
  LadoC := -5;   //8;       //10;     //-5     //5      //5
  LadoB := 8;   //10;      //5;      //8      //-8     //8
  ladoA := 10; //5;       //8;      //10     //10     //-10
  ReturnValue := FQualTriangulo.ValidaTrianguloEscaleno(ladoA, LadoB, LadoC);
  Check(ReturnValue = 'Triangulo Escaleno');
end;

procedure TestTQualTriangulo.TestValidaTrianguloIsosceles;
var
  ReturnValue: string;
  LadoC: Integer;
  LadoB: Integer;
  ladoA: Integer;
begin
  //Testes      //passa   //passa  //passa
  LadoC := 12;  //10      //10     //12
  LadoB := 10;  //10      //12     //12
  ladoA := 10;  //12      //10     //10
  ReturnValue := FQualTriangulo.ValidaTrianguloIsosceles(ladoA, LadoB, LadoC);
  Check(ReturnValue = 'Triangulo Isosceles');
end;

procedure TestTQualTriangulo.TrianguloValido;
var
  ReturnValue: string;
  LadoC: Integer;
  LadoB: Integer;
  ladoA: Integer;
begin
  //Testes       //passa   //passa   //passa  //passa  //passa
  LadoC := 9;   //8;       //10;     //-5     //5      //5
  LadoB := 9;   //10;      //5;      //8      //-8     //8
  ladoA := 9; //5;       //8;      //10     //10     //-10
   ReturnValue := FQualTriangulo.TrianguloValido(ladoA, LadoB, LadoC);
   Check(ReturnValue = 'É um Triangulo');
end;

procedure TestTQualTriangulo.TestValidaTrianguloEquilatero;
var
  ReturnValue: string;
  LadoC: Integer;
  LadoB: Integer;
  ladoA: Integer;
begin
  //Teste passa     //Não passa   //passa   //não passa
  LadoC := 0;       //-8          //9       //0
  LadoB := 0;       //-8          //9       //0
  ladoA := 0;       //-8          //9       //0
  ReturnValue := FQualTriangulo.ValidaTrianguloEquilatero(ladoA, LadoB, LadoC);
  Check(ReturnValue = 'Triangulo Equilatero');
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTQualTriangulo.Suite);
end.

//Beatriz Alves e Denise Maria
